@page "/"


<MudMainContent>
    <MudContainer>
        <div class="game-board-container">
            <div class="game-board">
                <div class="start-row-container">
                    <div class="row start-row">
                        <!-- Top input row for letters -->
                        <input type="text" maxlength="1" class="block start-block" 
                            @bind="topRowValues[0]" 
                            @oninput="(e) => HandleInput(e, 0, true)"
                            @onkeydown="e => HandleBackspace(e, 0,true)">
                        <input type="text" maxlength="1" class="block start-block" 
                            @bind="topRowValues[1]" 
                            @oninput="(e) => HandleInput(e, 1, true)"
                            @onkeydown="e => HandleBackspace(e, 1,true)">
                        <input type="text" maxlength="1" class="block start-block" 
                            @bind="topRowValues[2]" 
                            @oninput="(e) => HandleInput(e, 2, true)"
                            @onkeydown="e => HandleBackspace(e, 2,true)">
                        <input type="text" maxlength="1" class="block start-block" 
                            @bind="topRowValues[3]" 
                            @oninput="(e) => HandleInput(e, 3, true)"
                            @onkeydown="e => HandleBackspace(e, 3,true)">
                        <input type="text" maxlength="1" class="block start-block" 
                            @bind="topRowValues[4]" 
                            @oninput="(e) => HandleInput(e, 4, true)"
                            @onkeydown="e => HandleBackspace(e, 4,true)">

                    </div>
                </div>
                <div class="middle-row-container">
                    <div class="row">
                        <!-- Middle display row for fixed letters -->
                        <div class="block middle-block"></div>
                        <div class="block middle-block"></div>
                        <div class="block middle-block"></div>
                        <div class="block middle-block"></div>
                        <div class="block middle-block"></div>
                    </div>
                </div>
                <div class="end-row-container">
                    <div class="row end-row">
                        <!-- Bottom input row for letters -->
                        <input type="text" maxlength="1" class="block end-block"
                            @bind="bottomRowValues[0]" 
                            @oninput="e => HandleInput(e, 0, false)"
                            @onkeydown="e => HandleBackspace(e, 0, false)">

                        <input type="text" maxlength="1" class="block end-block" 
                            @bind="bottomRowValues[1]" 
                            @oninput="(e) => HandleInput(e, 1, false)"
                            @onkeydown="e => HandleBackspace(e, 1, false)">

                        <input type="text" maxlength="1" class="block end-block" 
                            @bind="bottomRowValues[2]" 
                            @oninput="(e) => HandleInput(e, 2, false)"
                            @onkeydown="e => HandleBackspace(e, 2, false)">

                        <input type="text" maxlength="1" class="block end-block" 
                            @bind="bottomRowValues[3]" 
                            @oninput="(e) => HandleInput(e, 3, false)"
                            @onkeydown="e => HandleBackspace(e, 3, false)">

                        <input type="text" maxlength="1" class="block end-block" 
                            @bind="bottomRowValues[4]" 
                            
                            @oninput="HandleEvent">
                    </div>
                </div>
            </div>
        </div>

        <div class="solve-button-container">
            <div>
                <MudButton Variant="Variant.Filled">Solve</MudButton>
            </div>
        </div>
    </MudContainer>
</MudMainContent>

@code {
    private string[] topRowValues = new string[5];
    private string[] bottomRowValues = new string[5];

    private ElementReference[] topRowRefs = new ElementReference[5];
    private ElementReference[] bottomRowRefs = new ElementReference[5];

    private async Task HandleEvent(ChangeEventArgs e)
    {
        await Task.Delay(1000);
    }

    private async Task HandleInput(ChangeEventArgs e, int index, bool isTopRow)
    {
        var letters = isTopRow ? topRowValues : bottomRowValues;
        var refs = isTopRow ? topRowRefs : bottomRowRefs;
        var value = e.Value?.ToString();

        letters[index] = value;

        if (!string.IsNullOrEmpty(value) && index < refs.Length - 1)
        {
            await refs[index + 1].FocusAsync();
        }
    }

    private async Task HandleBackspace(KeyboardEventArgs e, int index, bool isTopRow)
    {
        var letters = isTopRow ? topRowValues : bottomRowValues;
        var refs = isTopRow ? topRowRefs : bottomRowRefs;

        if (e.Key == "Backspace" && string.IsNullOrEmpty(letters[index]) && index > 0)
        {
            await refs[index - 1].FocusAsync();
        }
    }
}

