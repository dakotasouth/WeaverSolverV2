@page "/"
@inject HttpClient Http
@using MudBlazor
@using System;
@using System.IO;
@using System.Net.Http;
@using System.Reflection;
@using System.Threading.Tasks;

<MudMainContent>
    <MudContainer>
        <div class="game-board-container">
            <div class="game-board">
                <div class="start-row-container">
                    <div class="row start-row">
                        <!-- Top input row for letters -->
                        @if (wordLength == 4 && topRowValues.Count == 4 && topRowRefs.Count == 4)
                        {
                            <input type="text" maxlength="1" class="block start-block"
                                @bind="topRowValues[0]"
                                @oninput="(e) => HandleInput(e, 0, true)"
                                @onkeydown="e => HandleBackspace(e, 0, true)"
                                @ref="topRowRefs[0]">

                            <input type="text" maxlength="1" class="block start-block"
                                @bind="topRowValues[1]"
                                @oninput="(e) => HandleInput(e, 1, true)"
                                @onkeydown="e => HandleBackspace(e, 1, true)"
                                @ref="topRowRefs[1]">

                            <input type="text" maxlength="1" class="block start-block"
                                @bind="topRowValues[2]"
                                @oninput="(e) => HandleInput(e, 2, true)"
                                @onkeydown="e => HandleBackspace(e, 2, true)"
                                @ref="topRowRefs[2]">

                            <input type="text" maxlength="1" class="block start-block"
                                @bind="topRowValues[3]"
                                @oninput="(e) => HandleInput(e, 3, true)"
                                @onkeydown="e => HandleBackspace(e, 3, true)"
                                @ref="topRowRefs[3]">
                        }
                        else if (wordLength == 5 && topRowValues.Count == 5 && topRowRefs.Count == 5)
                        {
                            <input type="text" maxlength="1" class="block start-block"
                                @bind="topRowValues[0]"
                                @oninput="(e) => HandleInput(e, 0, true)"
                                @onkeydown="e => HandleBackspace(e, 0, true)"
                                @ref="topRowRefs[0]">

                            <input type="text" maxlength="1" class="block start-block"
                                @bind="topRowValues[1]"
                                @oninput="(e) => HandleInput(e, 1, true)"
                                @onkeydown="e => HandleBackspace(e, 1, true)"
                                @ref="topRowRefs[1]">

                            <input type="text" maxlength="1" class="block start-block"
                                @bind="topRowValues[2]"
                                @oninput="(e) => HandleInput(e, 2, true)"
                                @onkeydown="e => HandleBackspace(e, 2, true)"
                                @ref="topRowRefs[2]">
    
                            <input type="text" maxlength="1" class="block start-block"
                                @bind="topRowValues[3]"
                                @oninput="(e) => HandleInput(e, 3, true)"
                                @onkeydown="e => HandleBackspace(e, 3, true)"
                                @ref="topRowRefs[3]">
    
                            <input type="text" maxlength="1" class="block start-block"
                                @bind="topRowValues[4]"
                                @oninput="(e) => HandleInput(e, 4, true)"
                                @onkeydown="e => HandleBackspace(e, 4, true)"
                                @ref="topRowRefs[4]">
                        }
                    </div>
                </div>
                <div class="middle-row-container">
                    @if (solutionResult != null && solutionResult.Count > 0)
                    {
                        foreach (string word in solutionResult)
                        {
                            if (word != null)
                            {
                                <div class="row">
                                    @foreach (char letter in word)
                                    {
                                        <div class="block middle-block">@letter</div>
                                    }
                                </div>
                            }
                        }
                    }
                    else
                    {
                        @if (wordLength == 4)
                        {
                            <div class="row">
                                <div class="block middle-block"></div>
                                <div class="block middle-block"></div>
                                <div class="block middle-block"></div>
                                <div class="block middle-block"></div>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="block middle-block"></div>
                                <div class="block middle-block"></div>
                                <div class="block middle-block"></div>
                                <div class="block middle-block"></div>
                                <div class="block middle-block"></div>
                            </div>
                        }
                    }
                </div>
                <div class="end-row-container">
                    <div class="row end-row">
                        <!-- Bottom input row for letters -->
                        @if (wordLength == 4 && bottomRowValues.Count == 4 && bottomRowRefs.Count == 4)
                        {
                            <input type="text" maxlength="1" class="block end-block"
                                @bind="bottomRowValues[0]"
                                @oninput="(e) => HandleInput(e, 0, false)"
                                @onkeydown="e => HandleBackspace(e, 0, false)"
                                @ref="bottomRowRefs[0]">

                            <input type="text" maxlength="1" class="block end-block"
                                @bind="bottomRowValues[1]"
                                @oninput="(e) => HandleInput(e, 1, false)"
                                @onkeydown="e => HandleBackspace(e, 1, false)"
                                @ref="bottomRowRefs[1]">

                            <input type="text" maxlength="1" class="block end-block"
                                @bind="bottomRowValues[2]"
                                @oninput="(e) => HandleInput(e, 2, false)"
                                @onkeydown="e => HandleBackspace(e, 2, false)"
                                @ref="bottomRowRefs[2]">

                            <input type="text" maxlength="1" class="block end-block"
                                @bind="bottomRowValues[3]"
                                @oninput="(e) => HandleInput(e, 3, false)"
                                @onkeydown="e => HandleBackspace(e, 3, false)"
                                @ref="bottomRowRefs[3]">
                        }
                        else if (wordLength == 5 && bottomRowValues.Count == 5 && bottomRowRefs.Count == 5)
                        {
                            <input type="text" maxlength="1" class="block end-block"
                                @bind="bottomRowValues[0]"
                                @oninput="(e) => HandleInput(e, 0, false)"
                                @onkeydown="e => HandleBackspace(e, 0, false)"
                                @ref="bottomRowRefs[0]">

                            <input type="text" maxlength="1" class="block end-block"
                                @bind="bottomRowValues[1]"
                                @oninput="(e) => HandleInput(e, 1, false)"
                                @onkeydown="e => HandleBackspace(e, 1, false)"
                                @ref="bottomRowRefs[1]">

                            <input type="text" maxlength="1" class="block end-block"
                                @bind="bottomRowValues[2]"
                                @oninput="(e) => HandleInput(e, 2, false)"
                                @onkeydown="e => HandleBackspace(e, 2, false)"
                                @ref="bottomRowRefs[2]">

                            <input type="text" maxlength="1" class="block end-block"
                                @bind="bottomRowValues[3]"
                                @oninput="(e) => HandleInput(e, 3, false)"
                                @onkeydown="e => HandleBackspace(e, 3, false)"
                                @ref="bottomRowRefs[3]">

                            <input type="text" maxlength="1" class="block end-block"
                                @bind="bottomRowValues[4]"
                                @oninput="(e) => HandleInput(e, 4, false)"
                                @onkeydown="e => HandleBackspace(e, 4, false)"
                                @ref="bottomRowRefs[4]">
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="button-container">
            <div>
                <MudButton Variant="Variant.Filled" @onclick="HandleReset">Reset</MudButton>
            </div>
            <MudSpacer />
            <div>
                <MudSelect T="int" Label="Word Length" Variant="Variant.Outlined" Margin="Margin.Dense" Value="wordLength" ValueChanged="HandleWordLength">
                    <MudSelectItem T="int" Value="4" />
                    <MudSelectItem T="int" Value="5" />
                </MudSelect>
            </div>
            <MudSpacer />
            <div>
                <MudButton Variant="Variant.Filled" @onclick="HandleSolve">Solve</MudButton>
            </div>
        </div>
    </MudContainer>
</MudMainContent>

@code {
    private int wordLength = 5;
    private List<string?> topRowValues = new();
    private List<string?> bottomRowValues = new();
    private List<ElementReference> topRowRefs = new();
    private List<ElementReference> bottomRowRefs = new();
    private List<string> solutionResult = new List<string>();
    string words4Response = string.Empty;
    string words5Response = string.Empty;

    List<string> words4 = new();
    List<string> words5 = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Use await to asynchronously fetch the files
            words4Response = await Http.GetStringAsync("files/words4.txt");
            words5Response = await Http.GetStringAsync("files/words5.txt");

            // Split the responses into lists
            words4 = words4Response.Split(", ").ToList();
            words5 = words5Response.Split(", ").ToList();

            topRowValues = new(new string[wordLength]);
            bottomRowValues = new(new string[wordLength]);
            topRowRefs = new(new ElementReference[wordLength]);
            bottomRowRefs = new(new ElementReference[wordLength]);

            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void HandleInput(ChangeEventArgs e, int index, bool isTopRow)
    {
        try
        {
            List<string?> letters = isTopRow ? topRowValues : bottomRowValues;
            List<ElementReference> refs = isTopRow ? topRowRefs : bottomRowRefs;
            string? value = e.Value?.ToString();

            letters[index] = value ?? "";

            if (!string.IsNullOrEmpty(value) && index < refs.Count - 1)
            {
                refs[index + 1].FocusAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void HandleBackspace(KeyboardEventArgs e, int index, bool isTopRow)
    {
        try
        {
            List<string?> letters = isTopRow ? topRowValues : bottomRowValues;
            List<ElementReference> refs = isTopRow ? topRowRefs : bottomRowRefs;

            if (e.Key == "Backspace" && index > 0)
            {
                refs[index - 1].FocusAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void HandleSolve()
    {
        try
        {
            string set_start = string.Join("", topRowValues);
            string set_end = string.Join("", bottomRowValues);

            List<string> answer = solve_v3(set_start, set_end);

            solutionResult = answer;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void HandleReset()
    {
        try
        {
            topRowValues = new(new string[wordLength]);
            bottomRowValues = new(new string[wordLength]);
            topRowRefs = new(new ElementReference[wordLength]);
            bottomRowRefs = new(new ElementReference[wordLength]);
            solutionResult = new List<string>();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void HandleWordLength(int selectedValue)
    {
        try
        {
            if (selectedValue > wordLength)
            {
                // Increase wordLength
                while (topRowValues.Count < selectedValue)
                {
                    topRowValues.Add(""); // Add empty strings
                }

                while (bottomRowValues.Count < selectedValue)
                {
                    bottomRowValues.Add(""); // Add empty strings
                }

                while (topRowRefs.Count < selectedValue)
                {
                    topRowRefs.Add(new ElementReference());
                }

                while (bottomRowRefs.Count < selectedValue)
                {
                    bottomRowRefs.Add(new ElementReference());
                }
            }
            else if (selectedValue < wordLength)
            {
                // Decrease wordLength
                topRowValues.RemoveRange(selectedValue, topRowValues.Count - selectedValue);
                bottomRowValues.RemoveRange(selectedValue, bottomRowValues.Count - selectedValue);
                topRowRefs.RemoveRange(selectedValue, topRowRefs.Count - selectedValue);
                bottomRowRefs.RemoveRange(selectedValue, bottomRowRefs.Count - selectedValue);
            }

            // Set all values to empty strings
            for (int i = 0; i < selectedValue; i++)
            {
                topRowValues[i] = "";
                bottomRowValues[i] = "";
            }

            // Reset solutionResult
            solutionResult = new List<string>();

            wordLength = selectedValue;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    List<string> get_neighbors(string word, HashSet<string> words_set)
    {
        List<string> neighbors = new List<string>();

        for (int i = 0; i < wordLength; i++)
        {
            foreach (char letter in "abcdefghijklmnopqrstuvwxyz")
            {
                string new_word = word.Substring(0, i) + letter + word.Substring(i + 1);

                if (new_word != word && words_set.Contains(new_word))
                {
                    neighbors.Add(new_word);
                }
            }
        }

        return neighbors;
    }

    List<string> solve_v3(string set_start, string set_end)
    {
        if (set_start.Length != wordLength || set_end.Length != wordLength || set_start == set_end || !set_start.All(char.IsLetter) || !set_end.All(char.IsLetter))
        {
            // Invalid input
            return new List<string>();
        }

        HashSet<string> words_set = new HashSet<string>();

        if (wordLength == 4)
        {
            words_set = new HashSet<string>(words4.Select(word => word.Substring(1, wordLength)));
        }
        else
        {
            words_set = new HashSet<string>(words5.Select(word => word.Substring(1, wordLength)));
        }

        set_start = set_start.ToLower();
        set_end = set_end.ToLower();

        if (!words_set.Contains(set_start) || !words_set.Contains(set_end))
        {
            return new List<string>();
        }

        words_set.Remove(set_start);

        Queue<List<string>> q = new Queue<List<string>>();
        q.Enqueue(new List<string> { set_start });

        while (q.Count > 0)
        {
            List<string> curr_path = q.Dequeue();
            string curr_word = curr_path.Last();

            if (curr_word == set_end)
            {
                // Found a path
                List<string> answer = curr_path.Select(x => x.ToUpper()).ToList();
                return answer;
            }

            List<string> neighbors = get_neighbors(curr_word, words_set);

            foreach (string neighbor in neighbors)
            {
                words_set.Remove(neighbor);
                List<string> new_path = new List<string>(curr_path);
                new_path.Add(neighbor);
                q.Enqueue(new_path);
            }
        }

        return new List<string>();
    }
}